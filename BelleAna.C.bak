#include "BelleAna.h"
#include <iostream>
#include <stdio.h>
#include <string.h>

void BelleAna::Loop(){
    //   cout << "Loop()" << endl;

    initialize(fChain);

    if (fChain == 0) return;

    Long64_t nentries = fChain->GetEntriesFast();

    Int_t nbytes = 0, nb = 0;
    for (Long64_t jentry=0; jentry<nentries;jentry++) {
        Long64_t ientry = LoadTree(jentry);
        if (ientry < 0) break;
        nb = fChain->GetEntry(jentry);   nbytes += nb;
        clear();
        tLeafToHist();
        execute();

    }

    finalize();

}

void BelleAna::initialize(TTree *fChain){
    //   cout << "initialize()" << endl;

    // create a new root file
    mFile_ = new TFile ("test.root", "recreate");

    // get list of leaves
    leaves  = fChain->GetListOfLeaves();

    // get number of leaves
    nLeaves_ = leaves->GetSize();

    // counting Int_t and Double_t type TLeaf 
    nLeavesI_=0;
    nLeavesD_=0;

    // get the all branch names and store them
    for (int i=0; i<nLeaves_;i++) {

        // go through each leaf
        TLeaf *leaf = (TLeaf*)leaves->UncheckedAt(i);

        // create array of TH1I
        if(strcmp(leaf->GetTypeName(), "Int_t") == 0) {
            histI_[nLeavesI_] = new TH1I(leaf->GetName(),leaf->GetName(),1000,0,0.01); 
            histI_[nLeavesI_]->SetCanExtend(kTRUE);
            nLeavesI_++;
        }

        // create array of TH1D
        if(strcmp(leaf->GetTypeName(), "Double_t") == 0 || strcmp(leaf->GetTypeName(), "Long64_t") == 0) {
            histD_[nLeavesD_] = new TH1D(leaf->GetName(),leaf->GetName(),1000,0,0.01); 
        //   histD_[nLeavesD_]->SetCanExtend(kTRUE);
            nLeavesD_++;
        }
    }

    // initialize vectors of min and max values for each hist
    histI_min_ = new vector<UInt_t>(nLeavesI_);
    histI_max_ = new vector<UInt_t>(nLeavesI_);
    histD_min_ = new vector<ULong_t>(nLeavesD_);
    histD_max_ = new vector<ULong_t>(nLeavesD_);

    // initialize private event counter
    nEvent_ = 0;
}


void BelleAna::execute(){


    if (nEvent_%1000 == 0) { 
        cout<<"## "<<nEvent_<<" processed!"<<endl;
    }

    // increment private event counter
    ++nEvent_;
}

void BelleAna::finalize(){

    //  cout << "finalize()" << endl;


    // optimize the TH1I histograms to fit all the values
    for(int i=0;i<nLeavesI_;i++){ 
 //       histI_[i]->ExtendAxis((*histI_min_)[i],histI_[i]->GetXaxis()); 
  //      histI_[i]->ExtendAxis((*histI_max_)[i],histI_[i]->GetXaxis()); 
    }

    // optimize the TH1D histograms to fit all the values
    for(int i=0;i<nLeavesD_;i++){ 
 //       histD_[i]->ExtendAxis((*histD_min_)[i],histD_[i]->GetXaxis()); 
//     histD_[i]->ExtendAxis((*histD_max_)[i],histD_[i]->GetXaxis()); 
    }

    mFile_->Write ();
    mFile_->Close ();

}

void BelleAna::clear(){
    //  cout << "clear()" << endl;
}

void BelleAna::tLeafToHist(){

    //   cout << "tLeafToHist()" << endl;

    int iLeavesI = 0;
    int iLeavesD = 0;

    for (int i=0; i<nLeaves_;i++) {

        // go through each leaf
        TLeaf *leaf = (TLeaf*)leaves->UncheckedAt(i);

        if(strcmp(leaf->GetTypeName(), "Int_t") == 0) {
            Int_t valueI = leaf->GetValue(0);

            // store min and max values for range optimization in finalize function
            if(valueI > (*histI_max_)[iLeavesI]) (*histI_max_)[iLeavesI] = valueI;
            if(valueI < (*histI_min_)[iLeavesI]) (*histI_min_)[iLeavesI] = valueI;

            histI_[iLeavesI]->Fill(valueI); 
            iLeavesI++;
        }

        if(strcmp(leaf->GetTypeName(), "Double_t") == 0 || strcmp(leaf->GetTypeName(), "Long64_t") == 0) {
            ULong_t valueL = leaf->GetValue(0);

            // store min and max values for range optimization in finalize function
            if(valueL > (*histI_max_)[iLeavesD]) (*histD_max_)[iLeavesD] = valueL;
            if(valueL < (*histI_min_)[iLeavesD]) (*histD_min_)[iLeavesD] = valueL;

            histD_[iLeavesD]->Fill(valueL); 
            iLeavesD++;
        }

    }

}
